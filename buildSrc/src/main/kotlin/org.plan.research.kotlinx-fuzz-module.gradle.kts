import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.gradle.api.tasks.Exec

plugins {
    kotlin("jvm")
}

group = GROUP_ID
version = VERSION

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(kotlin("test"))
}

kotlin {
    jvmToolchain(17)
}

tasks.getByName<KotlinCompile>("compileKotlin") {
    compilerOptions.allWarningsAsErrors = true
}

tasks.test {
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

tasks.register<Exec>("buildRustLib") {
    workingDir = file("$rootDir/CasrAdapter")
    commandLine = listOf("cargo", "build", "--release")
    outputs.upToDateWhen {
        val targetDir = File("$rootDir/CasrAdapter", "target/release")
        val outputFiles = targetDir.listFiles { _, name ->
            name.endsWith(".so") || name.endsWith(".dll") || name.endsWith(".dylib")
        }
        outputFiles?.isNotEmpty() == true
    }
}

tasks.register<Copy>("copyRustLibs") {
    dependsOn("buildRustLib")
    doLast {
        val targetDir = File("$rootDir/CasrAdapter", "target/release")
        val outputFiles = targetDir.listFiles { _, name ->
            name.endsWith(".so") || name.endsWith(".dll") || name.endsWith(".dylib")
        }

        if (outputFiles == null || outputFiles.isEmpty()) {
            throw GradleException("No library file was generated by Cargo.")
        }

        outputFiles.forEach { file ->
            copy {
                from(file)
                into(projectDir)
            }
            copy {
                from(file)
                into(rootDir)
            }
        }
    }
}

tasks.named("build") {
    dependsOn("copyRustLibs")
}
