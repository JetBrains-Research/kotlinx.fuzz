#!/usr/bin/env python3

import argparse
import sys
from os import path
import os
import subprocess
import shutil


def empty_dir(dir_path: str):
    if not path.exists(dir_path):
        os.mkdir(dir_path)
    elif not path.isdir(dir_path):
        print(f"Error: file '{dir_path}' already exists and is not a directory'", file=sys.stderr)
        exit(1)
    elif not os.listdir(dir_path) == []:
        print(f"Error: directory '{dir_path}' is not empty", file=sys.stderr)
        exit(1)


def createEmptyDirs(dirs: list[str]):
    for dir in dirs:
        empty_dir(dir)


def get_script_location():
    s = path.dirname(path.realpath(sys.argv[0]))
    assert path.exists(s)
    assert path.exists(path.join(s, 'run-targets'))
    assert path.exists(path.join(s, 'compute-timestamps'))
    assert path.exists(path.join(s, 'overall-stats'))
    assert path.exists(path.join(s, 'jacoco'))

    return s


experiment_dir = None
project_dir = None
targets_file = None
duration = None
threads = None
classfiles = None

run_targets = path.join(get_script_location(), 'run-targets')
compute_timestamps = path.join(get_script_location(), 'compute-timestamps')
overall_stats = path.join(get_script_location(), 'overall-stats')
parse_logs = path.join(get_script_location(), 'parse-logs')
jacoco = path.join(get_script_location(), 'jacoco')


def exec_run_targets():
    env = os.environ.copy()
    env['PROJECT_HOME'] = project_dir
    env['LOGS_DIR'] = path.join(experiment_dir, "logs")
    env['JACOCO_EXEC_DIR'] = path.join(experiment_dir, "jacoco")
    env['TARGET_FILE'] = targets_file
    env['THREADS'] = str(threads)

    subprocess.run(run_targets, env=env)


def exec_overall_stats():
    overall_stats_args = [
        overall_stats,
        path.join(experiment_dir, 'stats'),
        path.join(experiment_dir, 'overall-stats.csv')]
    subprocess.run(overall_stats_args)


def exec_parse_logs():
    subprocess.run([
        parse_logs,
        path.join(experiment_dir, 'logs'),
        path.join(experiment_dir, 'stats'),
        path.join(experiment_dir, 'findings')
    ])


def exec_compute_timestamps():
    subprocess.run([
        compute_timestamps,
        path.join(experiment_dir, 'stats'),
        path.join(experiment_dir, 'duration')
    ])
    subprocess.run([
        compute_timestamps,
        path.join(experiment_dir, 'findings'),
        path.join(experiment_dir, 'duration')
    ])


def jacoco_merge():
    exec_ = [
        jacoco,
        'merge',
        '--destfile', path.join(experiment_dir, 'jacoco-merged.exec')
    ]
    subprocess.run(exec_ + list(
        map(lambda x: path.join(experiment_dir, 'jacoco', x), list(os.listdir(path.join(experiment_dir, 'jacoco'))))))


def jacoco_execinfo():
    with open(path.join(experiment_dir, 'jacoco-execinfo.txt'), 'w') as of:
        subprocess.run([
            jacoco,
            'execinfo',
            path.join(experiment_dir, 'jacoco-merged.exec')
        ], stdout=of)


def jacoco_report():
    subprocess.run([
        jacoco,
        'report',
        '--csv', path.join(experiment_dir, 'jacoco-report.csv'),
        '--classfiles', classfiles,
        path.join(experiment_dir, 'jacoco-merged.exec')
    ])


def main():
    createEmptyDirs([
        args.experiment_dir,
        path.join(experiment_dir, "logs"),
        path.join(experiment_dir, "jacoco"),
        path.join(experiment_dir, "findings"),
        path.join(experiment_dir, "stats"),
    ])

    exec_run_targets()
    shutil.copytree(path.join(project_dir, 'src', 'test', 'resources'), path.join(experiment_dir, 'resources'))
    exec_parse_logs()
    exec_compute_timestamps()
    exec_overall_stats()
    jacoco_merge()
    jacoco_report()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Run experiment")
    parser.add_argument('experiment_dir', type=str, help="Path to store all results")
    parser.add_argument('project_dir', type=str, help="Path to project")
    parser.add_argument("targets_file", type=str, help="Path to file with list of fuzz targets")
    parser.add_argument('duration', type=str, help="MaxDuration value from @FuzzTest")
    parser.add_argument('threads', type=int, help='Number of targets to run in parallel')
    parser.add_argument('classfiles', type=str,
                        help='Argument for jacoco report --classfiles. If your library is single jar, just pass path to it (you can find it in IDEA)')
    args = parser.parse_args()
    print(f"Arguments: {args}")

    experiment_dir = args.experiment_dir
    project_dir = args.project_dir
    targets_file = args.targets_file
    duration = args.duration
    threads = args.threads
    classfiles = args.classfiles

    get_script_location()
    main()
