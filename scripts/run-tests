#!/usr/bin/env python3

import sys
import subprocess
import os
import datetime
import shutil

# TODO, make base dir (currently "./core") customizable as well

def get_test_command(projectName, testName):
    command = [
        "./gradlew", "--no-daemon",
        (":%s:cleanJvmTest" % projectName),
        (":%s:jvmTest" % projectName),
        "--tests", testName
    ]
    return command


def print_help():
    print("""
       Usage:
       <project_name> <test_name> [test_name 2] [test_name 3] ...
              OR
       <project_name> -f <file with test names> [threads]
    """)


def main():
    args = sys.argv
    print(args)
    if len(args) >= 3 and args[2] != '-f' and args[2] != '--file':
        project_name = args[1]
        tests = args[2:]
        for test_name in tests:
            run_test(project_name, test_name)
        return
    elif (len(args) == 5 or len(args) == 4) and (args[2] == '-f' or args[2] == '--file'):
        file_name = args[3]
        print('Running tests from file \"' + file_name + '\"')
        project_name = args[1]
        threads = 1
        if len(args) == 5:
            threads = int(args[4])
            assert threads > 0

        with open(file_name, 'r') as f:
            tests = list(set(map(lambda x: x.strip().replace('#', '.'), f.readlines())))
            print('Running tests: ' + str(tests))
            tests_for_process = [list() for _ in range(threads)]
            for i in range(len(tests)):
                tests_for_process[i % threads].append(tests[i])

        pps = list()
        for tests in tests_for_process:
            p =  subprocess.Popen([args[0], project_name] + tests)
            pps.append(p)

        for p in pps:
            p.wait()
    else:
        print_help()
        exit(1)


def run_test(project_name, test_name):
    subprocess.run("pwd")
    print(test_name)

    clear_old_corpus(test_name)

    command = get_test_command(project_name, test_name)
    print(command)
    my_env = os.environ.copy()
    my_env["JAZZER_FUZZ"] = "1"
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d--%H-%M-%S")
    f = open(timestamp + "--" + test_name, "w")
    subprocess.run(command, env=my_env, stderr=subprocess.STDOUT, stdout=f)
    f.close()


# returns (class_name, method_name)
def split_to_class_and_method(test_name):
    i = test_name.rfind('.')
    return test_name[:i], test_name[i + 1:]


def clear_old_corpus(test_name):
    class_name, method_name = split_to_class_and_method(test_name)
    corpus_dir = "./core/.cifuzz-corpus/" + class_name + "/" + method_name
    print("Removing dir: " + corpus_dir)
    if os.path.exists(corpus_dir):
        shutil.rmtree(corpus_dir)


if __name__ == "__main__":
    main()
